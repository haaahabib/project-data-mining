# -*- coding: utf-8 -*-
"""[Data Mining] Project Flight Delay.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YcbkUJbC956_m77VzqrsMnYEmAxLylgp

## Classification

#### Import packages/library dan Setup
"""

# Environment Setup
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import pickle
from datetime import datetime

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import (classification_report, confusion_matrix, roc_auc_score,
                             ConfusionMatrixDisplay, roc_curve, precision_recall_curve)

from xgboost import XGBClassifier
from imblearn.pipeline import make_pipeline
from imblearn.over_sampling import SMOTE

sns.set(style='whitegrid')

"""#### Data loading dan EDA"""

from google.colab import drive
drive.mount('/content/drive')

# Load Dataset
dtypes = {
    'Airline': 'category',
    'Origin': 'category',
    'Destination': 'category',
    'DelayReason': 'category',
    'FlightNumber': 'int32',
    'Distance': 'float32'
}

df = pd.read_csv(
    "/content/drive/MyDrive/Penggalian Data/flight_delays.csv",
    dtype=dtypes,
    parse_dates=['ScheduledDeparture'],
    infer_datetime_format=True
)

from IPython.display import display
display(df)

# Distribusi Delay
plt.figure(figsize=(10,5))
sns.histplot(df['DelayMinutes'], bins=50, kde=True, log_scale=(False, True))
plt.axvline(5, color='green', linestyle='--', label='Threshold Delay > 5 Menit')
plt.title("Distribusi Keterlambatan (log scale)")
plt.xlabel("Delay Minutes")
plt.legend()
plt.show()

# Label Biner Delay (>5 Menit)
threshold = 5
df['IsDelayed'] = (df['DelayMinutes'] > threshold).astype(int)

# Visualisasi Kelas
plt.figure(figsize=(6,4))
sns.countplot(x='IsDelayed', data=df)
plt.title("Distribusi Kelas (0: On-Time, 1: Delayed)")
plt.show()

"""#### Feature Engineering"""

# Ekstraksi Fitur Temporal
def extract_time_features(df):
    df['DepHour'] = df['ScheduledDeparture'].dt.hour
    df['DayOfWeek'] = df['ScheduledDeparture'].dt.dayofweek
    df['Month'] = df['ScheduledDeparture'].dt.month
    df['Quarter'] = df['ScheduledDeparture'].dt.quarter
    df['WeekOfYear'] = df['ScheduledDeparture'].dt.isocalendar().week
    df['IsWeekend'] = df['DayOfWeek'].isin([5,6]).astype(int)
    df['DayPeriod'] = pd.cut(df['DepHour'], bins=[0,6,12,18,24],
                             labels=['Night', 'Morning', 'Afternoon', 'Evening'], right=False)
    return df.drop(columns=['ScheduledDeparture'])

df = extract_time_features(df)

# Korelasi Fitur Numerik
corr = df.select_dtypes(include=np.number).corr()
mask = np.triu(np.ones_like(corr, dtype=bool))
plt.figure(figsize=(12,8))
sns.heatmap(corr, mask=mask, annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Korelasi Fitur Numerik")
plt.show()

"""#### Data Pipeline dan Training Model"""

# Features
num_feat = ['FlightNumber', 'Distance', 'DepHour', 'WeekOfYear']
cat_feat = ['Airline', 'Origin', 'Destination', 'DelayReason', 'DayPeriod']

X = df[num_feat + cat_feat].copy()
y = df['IsDelayed']

X_train, X_test, y_train, y_test = train_test_split(
    X, y,
    test_size=0.2,
    stratify=y,
    random_state=42
)

# Pipeline Preprocessing
preproc = ColumnTransformer([
    ('num', StandardScaler(), num_feat),
    ('cat', OneHotEncoder(handle_unknown='ignore', sparse_output=False), cat_feat)
])

# Pipeline Model
model = make_pipeline(
    preproc,
    SMOTE(random_state=42),
    XGBClassifier(
        random_state=42,
        use_label_encoder=False,
        eval_metric='logloss'
    )
)

model.fit(X_train, y_train)

"""#### Evaluasi Model"""

# Evaluasi
y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:,1]

print("Classification Report:\n")
print(classification_report(y_test, y_pred, target_names=["On-Time", "Delayed"]))

print(f"ROC-AUC: {roc_auc_score(y_test, y_prob):.4f}")

# Confusion Matrix
plt.figure(figsize=(6,5))
ConfusionMatrixDisplay.from_estimator(model, X_test, y_test, display_labels=["On-Time", "Delayed"], cmap="Blues")
plt.title("Confusion Matrix")
plt.show()

"""#### Feature Importance"""

# Feature Importance
feat_num = num_feat
feat_cat = model.named_steps['columntransformer'].named_transformers_['cat']\
    .get_feature_names_out(cat_feat).tolist()

all_feat = feat_num + feat_cat
importances = model.named_steps['xgbclassifier'].feature_importances_

imp_df = pd.DataFrame({'Feature': all_feat, 'Importance': importances})
imp_df = imp_df.sort_values(by='Importance', ascending=False).head(5)

plt.figure(figsize=(10,7))
sns.barplot(x='Importance', y='Feature', data=imp_df)
plt.title("Top 5 Feature Importances")
plt.show()

"""#### Error Analysis Classification"""

# Analisis Error
X_test_ = X_test.copy()
X_test_['Actual'] = y_test
X_test_['Predicted'] = y_pred

# Salah klasifikasi
errors = X_test_[X_test_['Actual'] != X_test_['Predicted']]
print(f"Total misclassified: {len(errors)}")

# Distribusi jenis error
conf = pd.crosstab(errors['Actual'], errors['Predicted'], rownames=['Actual'], colnames=['Predicted'])
print("\nError Type Distribution:\n", conf)

# Visualisasi
plt.figure(figsize=(6,4))
sns.countplot(x='Actual', hue='Predicted', data=errors)
plt.title("Distribusi Salah Prediksi")
plt.xlabel("Actual Class")
plt.ylabel("Jumlah")
plt.legend(title="Predicted")
plt.show()

# Data misclassified
print("Contoh 10 Baris Misclassified:")
display(errors.head(10))

# Distribusi Fitur Kategorikal Utama pada Data Salah Klasifikasi
print("Distribusi Maskapai pada Data Salah Klasifikasi:")
print(errors['Airline'].value_counts().head())

print("Distribusi Bandara Asal (Origin) pada Data Salah Klasifikasi:")
print(errors['Origin'].value_counts().head())

print("Distribusi Bandara Tujuan (Destination) pada Data Salah Klasifikasi:")
print(errors['Destination'].value_counts().head())

# Statistik fitur numerik pada data salah klasifikasi
print("Statistik Deskriptif Fitur Numerik pada Data Salah Klasifikasi:")
print(errors[num_feat].describe())

"""#### Save dan Model Inference"""

# Simpan model dan preprocessor
joblib.dump(model, 'xgb_flight_model.pkl')

# Inference Function
def predict_delay(input_dict):
    sample = pd.DataFrame([input_dict])
    sample['ScheduledDeparture'] = pd.to_datetime(sample['ScheduledDeparture'])
    sample = extract_time_features(sample)
    X_infer = sample[num_feat + cat_feat]

    pred = model.predict(X_infer)[0]
    prob = model.predict_proba(X_infer)[0][1]

    return {
        'prediction': 'Delayed' if pred == 1 else 'On-Time',
        'probability': round(prob, 4)
    }

# Contoh
sample_input = {
    'Airline': 'Garuda Indonesia',
    'Origin': 'CGK',
    'Destination': 'DPS',
    'DelayReason': 'Weather',
    'FlightNumber': 1234,
    'Distance': 800.0,
    'ScheduledDeparture': '2024-08-15 14:30:00'
}

result = predict_delay(sample_input)
print("\nHasil Prediksi:")
print(f"Status: {result['prediction']}")
print(f"Probabilitas Delay: {result['probability']:.2%}")

"""### Regression

#### Import packages/library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from datetime import datetime

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from scipy.stats import chisquare

from xgboost import XGBRegressor

sns.set(style="whitegrid")

"""#### Load data dan fitur waktu"""

# Load data
df = pd.read_csv(
    "/content/drive/MyDrive/Penggalian Data/flight_delays.csv",
    dtype={
        'Airline': 'category',
        'Origin': 'category',
        'Destination': 'category',
        'DelayReason': 'category',
        'FlightNumber': 'int32',
        'Distance': 'float32'
    },
    parse_dates=['ScheduledDeparture']
)

# Ekstraksi fitur waktu
def extract_time_features(df):
    df['DepHour'] = df['ScheduledDeparture'].dt.hour
    df['DayOfWeek'] = df['ScheduledDeparture'].dt.dayofweek
    df['Month'] = df['ScheduledDeparture'].dt.month
    df['Quarter'] = df['ScheduledDeparture'].dt.quarter
    df['WeekOfYear'] = df['ScheduledDeparture'].dt.isocalendar().week
    df['IsWeekend'] = df['DayOfWeek'].isin([5,6]).astype(int)
    df['DayPeriod'] = pd.cut(df['DepHour'], bins=[0,6,12,18,24],
                             labels=['Night', 'Morning', 'Afternoon', 'Evening'], right=False)
    return df.drop(columns=['ScheduledDeparture'])

df = extract_time_features(df)

"""#### Feature dan Target"""

# Definisi fitur dan target
num_feat = ['FlightNumber', 'Distance', 'DepHour', 'WeekOfYear']
cat_feat = ['Airline', 'Origin', 'Destination', 'DelayReason', 'DayPeriod']

X = df[num_feat + cat_feat].copy()
y = df['DelayMinutes']  # Target numerik

# Split data
X_train, X_test, y_train, y_test = train_test_split(
    X, y,
    test_size=0.2,
    random_state=42
)

"""#### Pipeline dan Model Training"""

# Pipeline preprocessing
preproc = ColumnTransformer([
    ('num', StandardScaler(), num_feat),
    ('cat', OneHotEncoder(handle_unknown='ignore', sparse_output=False), cat_feat)
])

# Pipeline regresi
reg_model = Pipeline([
    ('preproc', preproc),
    ('regressor', XGBRegressor(
        n_estimators=100,
        max_depth=5,
        learning_rate=0.1,
        random_state=42
    ))
])

# Train model
reg_model.fit(X_train, y_train)

# Save model
joblib.dump(reg_model, 'xgb_delay_regressor.pkl')

"""#### Evaluasi dan Error Analisis"""

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# Prediksi
y_pred = reg_model.predict(X_test)

# Evaluasi Eror
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

print(f"RMSE        : {rmse:.2f}")
print(f"R-squared   : {r2:.4f}")
print(f"MAE         : {mae:.2f}")

# Bar Plot 3 Error Metrics
metrics = ['RMSE', 'R-squared', 'MAE']
values = [rmse, r2, mae]

plt.figure(figsize=(8,5))
sns.barplot(x=metrics, y=values, palette='Set2', hue=metrics, legend=False)
plt.title("Perbandingan 3 Error Metrics")
for i, v in enumerate(values):
    plt.text(i, v + 0.05, f"{v:.2f}", ha='center', fontweight='bold')
plt.ylabel("Nilai")
plt.tight_layout()
plt.show()

# Hitung error (residual)
error = y_test - y_pred
abs_error = np.abs(error)

# Gabungkan ke dalam dataframe
error_df = X_test.copy()
error_df['Actual'] = y_test
error_df['Predicted'] = y_pred
error_df['Error'] = error
error_df['AbsError'] = abs_error

# Sort by absolute error
top_errors = error_df.sort_values(by='AbsError', ascending=False).head(10)
print("10 Prediksi dengan Kesalahan Terbesar:")
display(top_errors)

error_df = X_test.copy()
error_df['Actual'] = y_test
error_df['Predicted'] = y_pred
error_df['Error'] = error_df['Actual'] - error_df['Predicted']
error_df['AbsError'] = error_df['Error'].abs()
error_df['DelayReason'] = df.loc[X_test.index, 'DelayReason'].values

# Rata-rata error per DelayReason
group_error = error_df.groupby('DelayReason', observed=False)['AbsError'].agg(['count', 'mean']).sort_values(by='mean', ascending=False)
print("DelayReason dengan Error Tertinggi:")
display(group_error.head(10))

# Visualisasi
plt.figure(figsize=(10,6))
sns.barplot(x='mean', y=group_error.index, data=group_error.reset_index(), palette='coolwarm', hue=group_error.index, legend=False)
plt.xlabel("Rata-rata Kesalahan Absolut")
plt.title("Rata-rata Error Berdasarkan DelayReason")
plt.tight_layout()
plt.show()

"""#### Model Inference"""

# Fungsi Inference Regresi
def predict_delay_minutes(input_dict):
    sample = pd.DataFrame([input_dict])
    sample['ScheduledDeparture'] = pd.to_datetime(sample['ScheduledDeparture'])
    sample = extract_time_features(sample)
    sample = sample[num_feat + cat_feat]

    model = joblib.load('xgb_delay_regressor.pkl')
    pred = model.predict(sample)[0]

    return round(pred, 2)

# Contoh penggunaan
sample_input = {
    'Airline': 'Garuda Indonesia',
    'Origin': 'CGK',
    'Destination': 'DPS',
    'DelayReason': 'Weather',
    'FlightNumber': 2345,
    'Distance': 780.0,
    'ScheduledDeparture': '2024-08-15 08:30:00'
}

predicted_delay = predict_delay_minutes(sample_input)
print(f"Prediksi Delay (Menit): {predicted_delay}")

"""### Classification & Regression Inference"""

import pandas as pd
import joblib
from datetime import datetime

# Fungsi bantu ekstraksi waktu
def extract_time_features(df):
    df['DepHour'] = df['ScheduledDeparture'].dt.hour
    df['DayOfWeek'] = df['ScheduledDeparture'].dt.dayofweek
    df['WeekOfYear'] = df['ScheduledDeparture'].dt.isocalendar().week
    df['DayPeriod'] = pd.cut(df['DepHour'], bins=[0,6,12,18,24],
                             labels=['Night', 'Morning', 'Afternoon', 'Evening'], right=False)
    return df

# Fungsi prediksi
def predict_flight(input_data):
    # Konversi input ke DataFrame
    df = pd.DataFrame([input_data])
    df['ScheduledDeparture'] = pd.to_datetime(df['ScheduledDeparture'])
    df = extract_time_features(df)

    # Fitur yang digunakan
    features = ['FlightNumber', 'Distance', 'DepHour', 'WeekOfYear',
                'Airline', 'Origin', 'Destination', 'DelayReason', 'DayPeriod']
    X = df[features]

    # Load model
    clf = joblib.load('xgb_flight_model.pkl')
    reg = joblib.load('xgb_delay_regressor.pkl')

    # Prediksi klasifikasi & regresi
    delay_prob = clf.predict_proba(X)[0][1]
    is_delayed = clf.predict(X)[0]
    delay_time = reg.predict(X)[0]

    # Output
    print("Hasil Prediksi Penerbangan")
    print(f"Status          : {'DELAYED' if is_delayed else 'ON-TIME'}")
    print(f"Probabilitas    : {delay_prob:.2%}")
    print(f"Estimasi Waktu  : {delay_time:.1f} menit")

# Contoh input pengguna
input_data = {
    'Airline': 'Garuda Indonesia',
    'Origin': 'CGK',
    'Destination': 'DPS',
    'DelayReason': 'Weather',
    'FlightNumber': 456,
    'Distance': 800.0,
    'ScheduledDeparture': '2024-08-15 15:00:00'
}

predict_flight(input_data)